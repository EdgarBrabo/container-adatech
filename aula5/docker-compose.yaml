version: "3.8"

services: 

  loadbalancer: 
    image: traefik 
    container_name: loadbalancer
    command: 
      - "--api.insecure=true" 
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports: 
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - backend 
      - frontend   
    labels:
      - traefik.enable=true
      - traefik.http.routers.dashboard.rule=Host(`localhost`)
      - traefik.http.routers.dashboard.middlewares=auth
      - "traefik.http.middlewares.auth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile 
    container_name: frontend
    environment:
      DATABASE_HOST: database
      DATABASE_NAME: postgres
    depends_on:
      database:
        condition: service_healthy
    entrypoint: nodemon --inspect=0.0.0.0 server.js    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 10s
    volumes: 
      - ./frontend:/usr/local/app  
    ports: 
      - "5001:80"
      - "127.0.0.1:9229:9229"
    networks:
      - backend 
      - frontend
    labels: 
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`frontend.vote.local`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      #- "traefik.http.services.frontend.loadbalancer.server.port=80"

  api: 
    build: 
      context: ./api 
      dockerfile: Dockerfile
    container_name: api
    healthcheck:
       test: ["CMD", "curl", "-f", "http://localhost"]
       interval: 15s
       timeout: 10s
       retries: 3
       start_period: 10s
    environment:
      REDIS_HOST: cached
    ports:  
      - "5002:80"
    networks:
      - backend
      - frontend

  database:
    container_name: database
    image: postgres:15-alpine
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres 
    volumes: 
      - "db-data:/var/lib/postgresql/data"
      - "./utils/healthchecks:/healthchecks"
    healthcheck:
      test: "/healthchecks/postgres.sh"
      interval: "5s"
    ports: 
      - "5435:5432"
    networks:
      - backend

  worker:
    container_name: worker
    build: ./worker
    depends_on: 
      #cached:
      #  condition: service_healthy
      database:
        condition: service_healthy
    networks:
      - backend

  cached: 
    container_name: cached
    build:
      context: ./cached
      dockerfile: Dockerfile
    volumes: 
      - ./utils/healthchecks:/healthchecks
    healthcheck:
      test: /healthchecks/redis.sh
      interval: 5s
    networks:
      - backend  

  seed: 
    container_name: seed 
    build: 
      context: ./utils/seed
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_healthy
    networks:
      - backend      

  portainer: 
    container_name: portainer
    image: portainer/portainer-ce:alpine
    command: -H unix:///var/run/docker.sock
    ports: 
      - "9000:9000"
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      #- portainer_data:/data
    restart: always
    networks:
      - backend
      - frontend    

volumes: 
   db-data:    

networks:
  backend: 
  frontend: